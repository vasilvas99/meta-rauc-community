if test -e virtio 0:1 uboot.env; then env load; fi;

setenv fallback_bootargs ""
fdt addr ${fdt_addr} && fdt get value bootargs /chosen bootargs || setenv bootargs ${fallback_bootargs}

test -n "${BOOT_ORDER}" || setenv BOOT_ORDER "A B"
test -n "${BOOT_A_LEFT}" || setenv BOOT_A_LEFT 3
test -n "${BOOT_B_LEFT}" || setenv BOOT_B_LEFT 3

setenv bootpart
setenv raucslot

for BOOT_SLOT in "${BOOT_ORDER}"; do
  if test "x${bootpart}" != "x"; then
    # skip remaining slots
  elif test "x${BOOT_SLOT}" = "xA"; then
    if test ${BOOT_A_LEFT} -gt 0; then
      setexpr BOOT_A_LEFT ${BOOT_A_LEFT} - 1
      echo "Found valid RAUC slot A"
      setenv bootpart "/dev/vda2"
      setenv raucslot "A"
    fi
  elif test "x${BOOT_SLOT}" = "xB"; then
    if test ${BOOT_B_LEFT} -gt 0; then
      setexpr BOOT_B_LEFT ${BOOT_B_LEFT} - 1
      echo "Found valid RAUC slot B"
      setenv bootpart "/dev/vda3"
      setenv raucslot "B"
    fi
  fi
done

# Use the automated slot counting as the default
setenv bootmenu_0 Autoboot=''
# Short-circuit automated bootargs if a menu entry is chosen
setenv bootmenu_1 Boot SLOT A='setenv bootpart "/dev/vda2" && setenv raucslot "A"'
setenv bootmenu_2 Boot SLOT B='setenv bootpart "/dev/vda3" && setenv raucslot "B"'
setenv bootmenu_3 Reset=reset
setenv bootmenu_4 Power Off=poweroff
bootmenu 3

if test -n "${bootpart}"; then
  setenv bootargs "${bootargs} root=${bootpart} rauc.slot=${raucslot}"
  echo "Booting with boot args: ${bootargs}"
  saveenv
else
  echo "No valid RAUC slot found. Resetting tries to 3"
  setenv BOOT_A_LEFT 3
  setenv BOOT_B_LEFT 3
  saveenv
  reset
fi

fatload virtio 0:1 ${kernel_addr_r} @@KERNEL_IMAGETYPE@@
if test ! -e virtio 0:1 uboot.env; then saveenv; fi;
@@KERNEL_BOOTCMD@@ ${kernel_addr_r} - ${fdt_addr}
